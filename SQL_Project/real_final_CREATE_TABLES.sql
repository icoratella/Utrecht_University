-- MySQL Script generated by MySQL Workbench
-- wo 29 jan 2025 14:52:33 CET
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema scRNAseq_GBM_classifier
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema scRNAseq_GBM_classifier
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `scRNAseq_GBM_classifier` DEFAULT CHARACTER SET utf8mb4 ;
USE `scRNAseq_GBM_classifier` ;

-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`Cell`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`Cell` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`Cell` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `Donor` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Patient ID, from where the cell derives.',
  `CellCycleFraction` DOUBLE NULL DEFAULT NULL COMMENT 'It represents a proportion associated with the cell cycle for each individual cell. This fraction indicates how much a cell\'s gene expression is influenced by or correlated with the genes involved in the cell cycle.',
  `IsCycling` ENUM('True', 'False') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'True if the cell is cycling, false if not. None of the healthy cells should be cycling.',
  `Chemistry` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Type of scRNAseq technique used.',
  `Cell_Type` ENUM('Healthy', 'Tumor') CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'If the cell is healthy or tumoral.',
  PRIMARY KEY (`Cell_ID`),
  UNIQUE INDEX `Cell_ID_UNIQUE` (`Cell_ID` ASC))
ENGINE = InnoDB
COMMENT = 'This table contains all the cell ids of both types of cells, healthy and tumor, and the common attributes.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`Gene`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`Gene` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`Gene` (
  `Gene_Name` VARCHAR(40) CHARACTER SET 'utf8mb4' NOT NULL,
  `Ensemble_ID` VARCHAR(40) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Another identifier for the gene.',
  `Chromosome` VARCHAR(2) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'on which chromosome is the gene',
  `Start` INT(11) NULL DEFAULT NULL COMMENT 'Where it starts on that chromosome',
  `End` INT(11) NULL DEFAULT NULL COMMENT 'When it ends on that chromosome',
  `Strand` ENUM('+', '-') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'on which strand it is ',
  `Selected` TINYINT(1) NULL DEFAULT NULL COMMENT 'If the genes have been selected as Important by the researchers that started the project before me.',
  `Valid_Gene` ENUM('True', 'False') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'If the gene is valid',
  `GBM_Highly_Variable` ENUM('True', 'False') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'If the gene is highly variable in the tumor dataset',
  PRIMARY KEY (`Gene_Name`),
  UNIQUE INDEX `Gene_Name_UNIQUE` (`Gene_Name` ASC),
  UNIQUE INDEX `Ensemble_ID_UNIQUE` (`Ensemble_ID` ASC))
ENGINE = InnoDB
COMMENT = 'This table contains a selection of the common genes to both types of cells.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`HealthyCell`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`HealthyCell` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`HealthyCell` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `Annotations` ENUM('Astrocytes', 'early Radial Glia', 'late Radial Glia', 'nIPC', 'OPC', 'pre-astrocytes', 'pre-OPC', 'subcortical nIPC') CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'Cell type the cell has been annotated',
  `Batch` VARCHAR(20) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'original study the cell comes from',
  `Stage` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Developing brain stage of the cell',
  `Scanpy_Clusters` TINYINT(4) NULL DEFAULT NULL COMMENT 'clusters obtained through scanpy',
  `Cytograph_Clusters` TINYINT(4) NULL DEFAULT NULL COMMENT 'clusters obtained through cytograph',
  PRIMARY KEY (`Cell_ID`),
  UNIQUE INDEX `Cell_ID_UNIQUE` (`Cell_ID` ASC),
  CONSTRAINT `fk_HealthyCell_Cell`
    FOREIGN KEY (`Cell_ID`)
    REFERENCES `scRNAseq_GBM_classifier`.`Cell` (`Cell_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains the ids of the cells of the healthy developing brain, along with their specific attributes.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`HealthyCell_GeneExpression`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`HealthyCell_GeneExpression` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`HealthyCell_GeneExpression` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `Gene_Name` VARCHAR(40) CHARACTER SET 'utf8mb4' NOT NULL,
  `Sparse_Raw_Counts` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`Cell_ID`, `Gene_Name`),
  INDEX `fk_HealthyCell_Expr_Gene` (`Gene_Name` ASC),
  CONSTRAINT `fk_HealthyCell_Expr_Cell`
    FOREIGN KEY (`Cell_ID`)
    REFERENCES `scRNAseq_GBM_classifier`.`HealthyCell` (`Cell_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_HealthyCell_Expr_Gene`
    FOREIGN KEY (`Gene_Name`)
    REFERENCES `scRNAseq_GBM_classifier`.`Gene` (`Gene_Name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains the raw counts of each gene in each healthy cell, skipping the zeros (sparse matrix)';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`Marker`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`Marker` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`Marker` (
  `Gene_Name` VARCHAR(40) CHARACTER SET 'utf8mb4' NOT NULL,
  `Cell_Type` VARCHAR(40) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `Literature` ENUM('True', 'False') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'If the gene has been identified as a marker reading literature',
  `DEA` ENUM('True', 'False') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'If the gene has been identified as a marker after a differential expression analysis across the cell classes.',
  PRIMARY KEY (`Gene_Name`),
  UNIQUE INDEX `Gene_Name_UNIQUE` (`Gene_Name` ASC),
  CONSTRAINT `fk_Marker_Gene`
    FOREIGN KEY (`Gene_Name`)
    REFERENCES `scRNAseq_GBM_classifier`.`Gene` (`Gene_Name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains a subset of the genes, corresponding to the marker genes for the different cell classes.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`PCA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`PCA` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`PCA` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `Cell_Type` ENUM('Healthy', 'Tumor') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'if healthy or tumor',
  `PC` VARCHAR(10) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'which Principal Component are we dealing with',
  `Coordinate` FLOAT NULL DEFAULT NULL COMMENT 'The cohordinate of that cell for that PC',
  PRIMARY KEY (`Cell_ID`, `PC`),
  CONSTRAINT `fk_PCA_Cell`
    FOREIGN KEY (`Cell_ID`)
    REFERENCES `scRNAseq_GBM_classifier`.`Cell` (`Cell_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains the PCA cohordinates for every cell.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`TumorCell`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`TumorCell` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`TumorCell` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `Clones` VARCHAR(45) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL,
  `Clusters` TINYINT(4) NULL DEFAULT NULL COMMENT 'witch cluster the cells belong to',
  `Dissociation` ENUM('Cell', 'Nuclei') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'If the expression values were taken using the single cell or the single nuclei technique.',
  `Sample` VARCHAR(20) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Sample from which the cell derives.',
  `Sample_ID` VARCHAR(20) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Another identifier for the Sample.',
  `Total_UMIs` INT(11) NULL DEFAULT NULL COMMENT 'Number of UMIs for that cell',
  PRIMARY KEY (`Cell_ID`),
  UNIQUE INDEX `Cell_ID_UNIQUE` (`Cell_ID` ASC),
  CONSTRAINT `fk_TumorCell_Cell`
    FOREIGN KEY (`Cell_ID`)
    REFERENCES `scRNAseq_GBM_classifier`.`Cell` (`Cell_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains the ids of the cells of the glioblastoma tumor cells, along with their specific attributes.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`Predictions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`Predictions` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`Predictions` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `GBmap` VARCHAR(20) CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Predictions generated by researchers before than me using a scanpy scoring function.',
  `Mahalanobis` ENUM('Astrocytes', 'early Radial Glia', 'late Radial Glia', 'nIPC', 'OPC', 'pre-astrocytes', 'pre-OPC', 'subcortical nIPC') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Predictions generated using the Mahalanobis distance-based method.',
  `Random_Forest` ENUM('Astrocytes', 'early Radial Glia', 'late Radial Glia', 'nIPC', 'OPC', 'pre-astrocytes', 'pre-OPC', 'subcortical nIPC') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'Predictions generated using the Random Forest classifier',
  `RF_max_probability` DOUBLE NULL DEFAULT NULL COMMENT 'Proportion of trees in the classifier that agreed on a class',
  PRIMARY KEY (`Cell_ID`),
  UNIQUE INDEX `Cell_ID_UNIQUE` (`Cell_ID` ASC),
  CONSTRAINT `fk_Predictions_TumorCell`
    FOREIGN KEY (`Cell_ID`)
    REFERENCES `scRNAseq_GBM_classifier`.`TumorCell` (`Cell_ID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains the predictions after the implementations of the classifiers, hence an assigned label to every tumor cell.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`TumorCell_GeneExpression`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`TumorCell_GeneExpression` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`TumorCell_GeneExpression` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `Gene_Name` VARCHAR(40) CHARACTER SET 'utf8mb4' NOT NULL,
  `Sparse_Raw_Counts` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`Cell_ID`, `Gene_Name`),
  INDEX `fk_TumorCell_Expr_Gene` (`Gene_Name` ASC),
  CONSTRAINT `fk_TumorCell_Expr_Cell`
    FOREIGN KEY (`Cell_ID`)
    REFERENCES `scRNAseq_GBM_classifier`.`TumorCell` (`Cell_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_TumorCell_Expr_Gene`
    FOREIGN KEY (`Gene_Name`)
    REFERENCES `scRNAseq_GBM_classifier`.`Gene` (`Gene_Name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains the raw counts of the tumor cells in a sparse format, skipping the zeros.';


-- -----------------------------------------------------
-- Table `scRNAseq_GBM_classifier`.`UMAP`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `scRNAseq_GBM_classifier`.`UMAP` ;

CREATE TABLE IF NOT EXISTS `scRNAseq_GBM_classifier`.`UMAP` (
  `Cell_ID` VARCHAR(120) CHARACTER SET 'utf8mb4' NOT NULL,
  `Cell_Type` ENUM('Healthy', 'Tumor') CHARACTER SET 'utf8mb4' NULL DEFAULT NULL COMMENT 'if healthy or tumor',
  `DIM` VARCHAR(10) CHARACTER SET 'utf8mb4' NOT NULL COMMENT 'which of the two dimensions is associated with the value in the coordinate column',
  `Coordinate` FLOAT NULL DEFAULT NULL COMMENT 'the coordinate in the space of that specific dimension expressed in DIM',
  PRIMARY KEY (`Cell_ID`, `DIM`),
  CONSTRAINT `fk_UMAP_Cell`
    FOREIGN KEY (`Cell_ID`)
    REFERENCES `scRNAseq_GBM_classifier`.`Cell` (`Cell_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table contains the UMAP cohordinates of all cells.';

USE `scRNAseq_GBM_classifier`;

DELIMITER $$

USE `scRNAseq_GBM_classifier`$$
DROP TRIGGER IF EXISTS `scRNAseq_GBM_classifier`.`before_insert_healthy_cell` $$
USE `scRNAseq_GBM_classifier`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `scRNAseq_GBM_classifier`.`before_insert_healthy_cell`
BEFORE INSERT ON `scRNAseq_GBM_classifier`.`HealthyCell`
FOR EACH ROW
BEGIN
   
    IF EXISTS (SELECT 1 FROM TumorCell WHERE Cell_ID = NEW.Cell_ID) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Disjointness constraint violated: Cell already exists in Tumor_Cell';
    END IF;
END$$


USE `scRNAseq_GBM_classifier`$$
DROP TRIGGER IF EXISTS `scRNAseq_GBM_classifier`.`before_insert_tumor_cell` $$
USE `scRNAseq_GBM_classifier`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `scRNAseq_GBM_classifier`.`before_insert_tumor_cell`
BEFORE INSERT ON `scRNAseq_GBM_classifier`.`TumorCell`
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM HealthyCell WHERE Cell_ID = NEW.Cell_ID) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Disjointness constraint violated: Cell already exists in Healthy_Cell';
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
